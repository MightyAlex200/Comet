'use strict';

// -----------------------------------------------------------------
//  This stub Zome code file was auto-generated by hc-scaffold
// -----------------------------------------------------------------

// -----------------------------------------------------------------
//  Exposed functions with custom logic https://developer.holochain.org/API_reference
// -----------------------------------------------------------------

// Helper timemachine functions

function markUpdated(newEntry, oldEntry) {
  return call('timemachine', 'markUpdated', {
    newEntry: newEntry,
    oldEntry: oldEntry
  });
}

function makeUnique(entry) {
  var newEntry = entry;
  newEntry.keyHash = App.Key.Hash;
  newEntry.timestamp = Date.now();
  return newEntry;
}

// Exposed functions

function commentCreate(input) {
  var commentEntry = makeUnique(input.commentEntry);
  var commentHash = commit("comment", commentEntry);
  var linkHash = commit("commentLink", { Links: [{ Base: input.targetHash, Link: commentHash, Tag: "comment" }] });
  return commentHash;
}

function commentRead(commentHash) {
  var comment = get(commentHash);
  return comment;
}

function commentUpdate(params) {
  var replaces = params.replaces;
  var newEntry = makeUnique(params.newEntry);
  var commentHash = update("commentLink", newEntry, replaces);
  markUpdated(commentHash, replaces);
  return commentHash;
}

function commentDelete(commentLinkHash) {
  var result = remove(commentLinkHash, "deleted");
  return result;
}

function fromHash(hash, statusMask) {
  return JSON.stringify(getLinks(hash, "comment", { Load: true, StatusMask: statusMask || HC.Status.Live }));
}


// -----------------------------------------------------------------
//  The Genesis Function https://developer.holochain.org/genesis
// -----------------------------------------------------------------

/**
 * Called only when your source chain is generated
 * @return {boolean} success
 */
function genesis() {
  return true;
}

// -----------------------------------------------------------------
//  Validation functions for every change to the local chain or DHT
// -----------------------------------------------------------------

function validate(entryType, entry, header, pkg, sources) {
  switch (entryType) {
    case "comment":
      return sources[0] == entry.keyHash;
    case "commentLink":
      // Base must be post or comment
      var baseType = get(entry.Links[0].Base, { GetMask: HC.GetMask.EntryType });
      if (baseType != "post" && baseType != "comment") {
        return false;
      }

      // Link must be comment
      var linkType = get(entry.Links[0].Link, { GetMask: HC.GetMask.EntryType });
      if (linkType != "comment") {
        return false;
      }

      // Source must be creator of comment
      var linkSources = get(entry.Links[0].Link, { GetMask: HC.GetMask.Sources });
      return linkSources[0] == sources[0];
  }

  // Invalid entry type
  return false;
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateCommit(entryName, entry, header, pkg, sources) {
  if (!validate(entryName, entry, header, pkg, sources)) {
    return false;
  }

  // // Validation special to validateCommit
  // switch (entryName) {
  //
  // }

  return true;
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validatePut(entryName, entry, header, pkg, sources) {
  if (!validate(entryName, entry, header, pkg, sources)) {
    return false;
  }

  // // Validation special to validatePut
  // switch (entryName) {
  //
  // }

  return true;
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {*} entry - the entry data to be set
 * @param {object} header - header for the entry containing properties EntryLink, Time, and Type
 * @param {string} replaces - the hash for the entry being updated
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateMod(entryName, entry, header, replaces, pkg, sources) {
  if (!validate(entryName, entry, header, pkg, sources)) {
    return false;
  }

  switch (entryName) {
    case "comment":
      return get(replaces, { GetMask: HC.GetMask.Sources })[0] == sources[0];
    case "commentLink":
      // Don't modify
      return false;
  }

  return true;
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {string} hash - the hash of the entry to remove
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateDel(entryName, hash, pkg, sources) {
  switch (entryName) {
    case "comment":
      return get(hash, { GetMask: HC.GetMask.Sources })[0] == sources[0];
    case "commentLink":
      return false;
    default:
      // invalid entry name
      return false;
  }
}

/**
 * Called to validate any changes to the local chain or DHT
 * @param {string} entryName - the type of entry
 * @param {string} baseHash - the hash of the base entry being linked
 * @param {?} links - ?
 * @param {*} pkg - the extra data provided by the validate[X]Pkg methods
 * @param {object} sources - an array of strings containing the keys of any authors of this entry
 * @return {boolean} is valid?
 */
function validateLink(entryName, baseHash, links, pkg, sources) {
  // Will already have been validated by validateCommit and validatePut
  
  switch (entryName) {
    case "comment":
      // Not a link, do not validate
      return false;
    case "commentLink":
      return true;
    default:
      // invalid entry name
      return false;
  }
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validatePutPkg(entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateModPkg(entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateDelPkg(entryName) {
  return null;
}

/**
 * Called to get the data needed to validate
 * @param {string} entryName - the name of entry to validate
 * @return {*} the data required for validation
 */
function validateLinkPkg(entryName) {
  return null;
}